"use strict";
// source: nft.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.NftEthNative', null, global);
goog.exportSymbol('proto.NftEthNative.NftKind', null, global);
goog.exportSymbol('proto.NftPacked', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NftPacked = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NftPacked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.NftPacked.displayName = 'proto.NftPacked';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NftEthNative = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NftEthNative, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.NftEthNative.displayName = 'proto.NftEthNative';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.NftPacked.prototype.toObject = function (opt_includeInstance) {
        return proto.NftPacked.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.NftPacked} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.NftPacked.toObject = function (includeInstance, msg) {
        var f, obj = {
            chainNonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
            data: msg.getData_asB64()
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NftPacked}
 */
proto.NftPacked.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.NftPacked;
    return proto.NftPacked.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NftPacked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NftPacked}
 */
proto.NftPacked.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readUint32());
                msg.setChainNonce(value);
                break;
            case 2:
                var value = /** @type {!Uint8Array} */ (reader.readBytes());
                msg.setData(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NftPacked.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.NftPacked.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NftPacked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NftPacked.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getChainNonce();
    if (f !== 0) {
        writer.writeUint32(1, f);
    }
    f = message.getData_asU8();
    if (f.length > 0) {
        writer.writeBytes(2, f);
    }
};
/**
 * optional uint32 chain_nonce = 1;
 * @return {number}
 */
proto.NftPacked.prototype.getChainNonce = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.NftPacked} returns this
 */
proto.NftPacked.prototype.setChainNonce = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.NftPacked.prototype.getData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.NftPacked.prototype.getData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};
/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.NftPacked.prototype.getData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};
/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.NftPacked} returns this
 */
proto.NftPacked.prototype.setData = function (value) {
    return jspb.Message.setProto3BytesField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.NftEthNative.prototype.toObject = function (opt_includeInstance) {
        return proto.NftEthNative.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.NftEthNative} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.NftEthNative.toObject = function (includeInstance, msg) {
        var f, obj = {
            nftKind: jspb.Message.getFieldWithDefault(msg, 1, 0),
            id: jspb.Message.getFieldWithDefault(msg, 2, ""),
            contractAddr: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NftEthNative}
 */
proto.NftEthNative.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.NftEthNative;
    return proto.NftEthNative.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NftEthNative} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NftEthNative}
 */
proto.NftEthNative.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {!proto.NftEthNative.NftKind} */ (reader.readEnum());
                msg.setNftKind(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setContractAddr(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NftEthNative.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.NftEthNative.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NftEthNative} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NftEthNative.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getNftKind();
    if (f !== 0.0) {
        writer.writeEnum(1, f);
    }
    f = message.getId();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getContractAddr();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * @enum {number}
 */
proto.NftEthNative.NftKind = {
    ERC721: 0,
    ERC1155: 1
};
/**
 * optional NftKind nft_kind = 1;
 * @return {!proto.NftEthNative.NftKind}
 */
proto.NftEthNative.prototype.getNftKind = function () {
    return /** @type {!proto.NftEthNative.NftKind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {!proto.NftEthNative.NftKind} value
 * @return {!proto.NftEthNative} returns this
 */
proto.NftEthNative.prototype.setNftKind = function (value) {
    return jspb.Message.setProto3EnumField(this, 1, value);
};
/**
 * optional string id = 2;
 * @return {string}
 */
proto.NftEthNative.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.NftEthNative} returns this
 */
proto.NftEthNative.prototype.setId = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string contract_addr = 3;
 * @return {string}
 */
proto.NftEthNative.prototype.getContractAddr = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.NftEthNative} returns this
 */
proto.NftEthNative.prototype.setContractAddr = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
goog.object.extend(exports, proto);
//# sourceMappingURL=data:application/json;base64,